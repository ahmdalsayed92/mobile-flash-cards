{"ast":null,"code":"var _jsxFileName = \"/Users/ahmedelsayed/work/learn/nanoDegree/flash cards/untitled folder/Mobile-flash-card-master/components/TestQuiz.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ViewPagerAndroid } from \"react-native-web/dist/index\";\nimport CustomButton from \"./CustomButton\";\nimport TouchingButton from \"./TouchingButton\";\nimport { gray, green, red, textGray, darkGray, white } from \"../utils/colors\";\nimport { connect } from 'react-redux';\nimport { withNavigation } from 'react-navigation';\nconst views = {\n  QUESTION: 'question',\n  ANSWER: 'answer',\n  RESULT: 'result'\n};\nconst answer = {\n  CORRECT: 'correct',\n  INCORRECT: 'incorrect'\n};\nexport class TestQuiz extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      show: views.QUESTION,\n      correct: 0,\n      incorrect: 0,\n      questionCount: this.props.deck.questions.length,\n      answered: Array(this.props.deck.questions.length).fill(0)\n    };\n\n    this.ans = (response, page) => {\n      if (response === answer.CORRECT) {\n        this.setState(prevState => ({\n          correct: prevState.correct + 1\n        }));\n      } else {\n        this.setState(prevState => ({\n          incorrect: prevState.incorrect + 1\n        }));\n      }\n\n      this.setState(prevState => ({\n        answered: prevState.answered.map((val, idx) => page === idx ? 1 : val)\n      }), () => {\n        const {\n          correct,\n          incorrect,\n          questionCount\n        } = this.state;\n\n        if (questionCount === correct + incorrect) {\n          this.setState({\n            show: views.RESULT\n          });\n        } else {\n          this.viewPager.setPage(page + 1);\n          this.setState(prevState => ({\n            show: views.QUESTION\n          }));\n        }\n      });\n    };\n\n    this.changePage = evt => {\n      this.setState({\n        show: views.QUESTION\n      });\n    };\n\n    this.reset = () => {\n      this.setState(prevState => ({\n        show: views.QUESTION,\n        correct: 0,\n        incorrect: 0,\n        answered: Array(prevState.questionCount).fill(0)\n      }));\n    };\n  }\n\n  render() {\n    const {\n      show\n    } = this.state;\n    const {\n      questions\n    } = this.props.deck;\n\n    if (questions.length === 0) {\n      return React.createElement(View, {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        }\n      }, \"OMG! There is no Cards in this DECK, So you can't take this QUIZ. But, You can add some cards and try again later.\"));\n    }\n\n    if (this.state.show === views.RESULT) {\n      const {\n        correct,\n        questionCount\n      } = this.state;\n      const percent = (correct / questionCount * 100).toFixed(0);\n      return React.createElement(View, {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        }\n      }, \" Congrats! Quiz Completed !!!! \"), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        }\n      }, correct, \" / \", questionCount, \" correct \"), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        }\n      }, \" Percentage for the correct Answers : \", percent, \"% \"), React.createElement(TouchingButton, {\n        onPress: this.reset,\n        btnStyle: {\n          borderColor: textGray,\n          backgroundColor: gray\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        }\n      }, \"Retake Quiz\"), React.createElement(TouchingButton, {\n        onPress: () => {\n          this.reset();\n          this.props.navigation.goBack();\n        },\n        btnStyle: {\n          borderColor: textGray,\n          backgroundColor: gray\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        }\n      }, \"Back To Deck\"), React.createElement(TouchingButton, {\n        onPress: () => {\n          this.reset();\n          this.props.navigation.navigate('Home');\n        },\n        btnStyle: {\n          borderColor: textGray,\n          backgroundColor: gray\n        },\n        styleForText: {\n          color: textGray\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        }\n      }, \"Back to Home\"));\n    }\n\n    return React.createElement(ViewPagerAndroid, {\n      style: styles.container,\n      scrollEnabled: true,\n      onPageSelected: this.changePage,\n      ref: viewPager => {\n        this.viewPager = viewPager;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      }\n    }, questions.map((question, idx) => React.createElement(View, {\n      style: styles.pageContainer,\n      key: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      }\n    }, React.createElement(View, {\n      style: styles.block,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      }\n    }, React.createElement(Text, {\n      style: styles.count,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      }\n    }, idx + 1, \" / \", questions.length)), React.createElement(View, {\n      style: [styles.block, styles.questionContainer],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      }\n    }, React.createElement(Text, {\n      style: styles.questionText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      }\n    }, show === views.QUESTION ? 'Question' : 'Answer'), React.createElement(View, {\n      style: styles.questionWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      }\n    }, React.createElement(Text, {\n      style: styles.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      }\n    }, show === views.QUESTION ? question.question : question.answer))), show === views.QUESTION ? React.createElement(CustomButton, {\n      txtStyle: {\n        color: red\n      },\n      onPress: () => this.setState({\n        show: views.ANSWER\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      }\n    }, \"Show Answer\") : React.createElement(CustomButton, {\n      txtStyle: {\n        color: red\n      },\n      onPress: () => this.setState({\n        show: views.QUESTION\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      }\n    }, \"Show Question\"), React.createElement(TouchingButton, {\n      btnStyle: {\n        backgroundColor: red,\n        borderColor: white\n      },\n      onPress: () => this.ans(answer.INCORRECT, idx),\n      disabled: this.state.answered[idx] === 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      }\n    }, \"Incorrect\"), React.createElement(TouchingButton, {\n      btnStyle: {\n        backgroundColor: green,\n        borderColor: white\n      },\n      onPress: () => this.ans(answer.CORRECT, idx),\n      disabled: this.state.answered[idx] === 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      }\n    }, \"Correct\"))));\n  }\n\n}\nTestQuiz.propTypes = {\n  deck: PropTypes.object.isRequired,\n  navigation: PropTypes.object.isRequired\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  pageContainer: {\n    flex: 1,\n    paddingTop: 16,\n    paddingLeft: 16,\n    paddingRight: 16,\n    paddingBottom: 16,\n    backgroundColor: gray,\n    justifyContent: 'space-around'\n  },\n  block: {\n    marginBottom: 20\n  },\n  title: {\n    fontSize: 32,\n    textAlign: 'center'\n  },\n  questionContainer: {\n    borderWidth: 1,\n    borderColor: darkGray,\n    backgroundColor: white,\n    borderRadius: 5,\n    paddingTop: 20,\n    paddingBottom: 20,\n    paddingLeft: 16,\n    paddingRight: 16,\n    flexGrow: 1\n  },\n  questionWrapper: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\n\nconst mapStateToProps = (state, _ref) => {\n  let {\n    title\n  } = _ref;\n  const deck = state[title];\n  return {\n    deck\n  };\n};\n\nexport default withNavigation(connect(mapStateToProps)(TestQuiz));","map":{"version":3,"sources":["/Users/ahmedelsayed/work/learn/nanoDegree/flash cards/untitled folder/Mobile-flash-card-master/components/TestQuiz.js"],"names":["React","Component","PropTypes","ViewPagerAndroid","CustomButton","TouchingButton","gray","green","red","textGray","darkGray","white","connect","withNavigation","views","QUESTION","ANSWER","RESULT","answer","CORRECT","INCORRECT","TestQuiz","state","show","correct","incorrect","questionCount","props","deck","questions","length","answered","Array","fill","ans","response","page","setState","prevState","map","val","idx","viewPager","setPage","changePage","evt","reset","render","textAlign","percent","toFixed","borderColor","backgroundColor","navigation","goBack","navigate","color","styles","container","question","pageContainer","block","count","questionContainer","questionText","questionWrapper","title","propTypes","object","isRequired","StyleSheet","create","flex","paddingTop","paddingLeft","paddingRight","paddingBottom","justifyContent","marginBottom","fontSize","borderWidth","borderRadius","flexGrow","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;SACiCC,gB;AACjC,OAAOC,YAAP;AACA,OAAOC,cAAP;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,QAA3B,EAAqCC,QAArC,EAA+CC,KAA/C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,MAAMC,KAAK,GAAG;AAAEC,EAAAA,QAAQ,EAAE,UAAZ;AAAwBC,EAAAA,MAAM,EAAE,QAAhC;AAA0CC,EAAAA,MAAM,EAAE;AAAlD,CAAd;AACA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,OAAO,EAAE,SAAX;AAAsBC,EAAAA,SAAS,EAAE;AAAjC,CAAf;AAEA,OAAO,MAAMC,QAAN,SAAuBpB,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAKtCqB,KALsC,GAK9B;AACNC,MAAAA,IAAI,EAAET,KAAK,CAACC,QADN;AAENS,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,SAAS,EAAE,CAHL;AAINC,MAAAA,aAAa,EAAE,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,SAAhB,CAA0BC,MAJnC;AAKNC,MAAAA,QAAQ,EAAEC,KAAK,CAAC,KAAKL,KAAL,CAAWC,IAAX,CAAgBC,SAAhB,CAA0BC,MAA3B,CAAL,CAAwCG,IAAxC,CAA6C,CAA7C;AALJ,KAL8B;;AAAA,SAatCC,GAbsC,GAahC,CAACC,QAAD,EAAWC,IAAX,KAAoB;AACxB,UAAID,QAAQ,KAAKjB,MAAM,CAACC,OAAxB,EAAiC;AAC/B,aAAKkB,QAAL,CAAcC,SAAS,KAAK;AAAEd,UAAAA,OAAO,EAAEc,SAAS,CAACd,OAAV,GAAoB;AAA/B,SAAL,CAAvB;AACD,OAFD,MAEO;AACL,aAAKa,QAAL,CAAcC,SAAS,KAAK;AAAEb,UAAAA,SAAS,EAAEa,SAAS,CAACb,SAAV,GAAsB;AAAnC,SAAL,CAAvB;AACD;;AACD,WAAKY,QAAL,CACEC,SAAS,KAAK;AACZP,QAAAA,QAAQ,EAAEO,SAAS,CAACP,QAAV,CAAmBQ,GAAnB,CAAuB,CAACC,GAAD,EAAMC,GAAN,KAAeL,IAAI,KAAKK,GAAT,GAAe,CAAf,GAAmBD,GAAzD;AADE,OAAL,CADX,EAIE,MAAM;AAEJ,cAAM;AAAEhB,UAAAA,OAAF;AAAWC,UAAAA,SAAX;AAAsBC,UAAAA;AAAtB,YAAwC,KAAKJ,KAAnD;;AAEA,YAAII,aAAa,KAAKF,OAAO,GAAGC,SAAhC,EAA2C;AACzC,eAAKY,QAAL,CAAc;AAAEd,YAAAA,IAAI,EAAET,KAAK,CAACG;AAAd,WAAd;AACD,SAFD,MAEO;AACL,eAAKyB,SAAL,CAAeC,OAAf,CAAuBP,IAAI,GAAG,CAA9B;AACA,eAAKC,QAAL,CAAcC,SAAS,KAAK;AAC1Bf,YAAAA,IAAI,EAAET,KAAK,CAACC;AADc,WAAL,CAAvB;AAGD;AACF,OAhBH;AAkBD,KArCqC;;AAAA,SAuCtC6B,UAvCsC,GAuCzBC,GAAG,IAAI;AAAE,WAAKR,QAAL,CAAc;AAAEd,QAAAA,IAAI,EAAET,KAAK,CAACC;AAAd,OAAd;AAA0C,KAvC1B;;AAAA,SAyCtC+B,KAzCsC,GAyC9B,MAAM;AACZ,WAAKT,QAAL,CAAcC,SAAS,KAAK;AAAEf,QAAAA,IAAI,EAAET,KAAK,CAACC,QAAd;AAAwBS,QAAAA,OAAO,EAAE,CAAjC;AAAoCC,QAAAA,SAAS,EAAE,CAA/C;AAC5BM,QAAAA,QAAQ,EAAEC,KAAK,CAACM,SAAS,CAACZ,aAAX,CAAL,CAA+BO,IAA/B,CAAoC,CAApC;AADkB,OAAL,CAAvB;AAGD,KA7CqC;AAAA;;AA+CtCc,EAAAA,MAAM,GAAG;AACP,UAAM;AAAExB,MAAAA;AAAF,QAAW,KAAKD,KAAtB;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAgB,KAAKF,KAAL,CAAWC,IAAjC;;AAEA,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,aACE,oBAAC,IAAD;AAAO,QAAA,KAAK,EAAE;AAAEkB,UAAAA,SAAS,EAAE;AAAb,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,8HADJ,CADF;AAQD;;AAED,QAAI,KAAK1B,KAAL,CAAWC,IAAX,KAAoBT,KAAK,CAACG,MAA9B,EAAsC;AACpC,YAAM;AAAEO,QAAAA,OAAF;AAAWE,QAAAA;AAAX,UAA6B,KAAKJ,KAAxC;AACA,YAAM2B,OAAO,GAAG,CAAEzB,OAAO,GAAGE,aAAX,GAA4B,GAA7B,EAAkCwB,OAAlC,CAA0C,CAA1C,CAAhB;AAEA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAG;AAAEF,UAAAA,SAAS,EAAE;AAAb,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,2CADJ,EAEI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOxB,OAAP,SAAmBE,aAAnB,cAFJ,EAGI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,mDAA6CuB,OAA7C,OAHJ,EAII,oBAAC,cAAD;AAAiB,QAAA,OAAO,EAAE,KAAKH,KAA/B;AACE,QAAA,QAAQ,EAAE;AAAEK,UAAAA,WAAW,EAAE1C,QAAf;AAAyB2C,UAAAA,eAAe,EAAE9C;AAA1C,SADZ;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJJ,EAQI,oBAAC,cAAD;AAAgB,QAAA,OAAO,EAAE,MAAM;AAAE,eAAKwC,KAAL;AAAc,eAAKnB,KAAL,CAAW0B,UAAX,CAAsBC,MAAtB;AAAiC,SAAhF;AACE,QAAA,QAAQ,EAAE;AAAEH,UAAAA,WAAW,EAAE1C,QAAf;AAAyB2C,UAAAA,eAAe,EAAE9C;AAA1C,SADZ;AAAA;AAAA;AAAA;AAAA;AAAA,wBARJ,EAYI,oBAAC,cAAD;AAAgB,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKwC,KAAL;AAAa,eAAKnB,KAAL,CAAW0B,UAAX,CAAsBE,QAAtB,CAA+B,MAA/B;AAAwC,SAArF;AACE,QAAA,QAAQ,EAAE;AAAEJ,UAAAA,WAAW,EAAE1C,QAAf;AAAyB2C,UAAAA,eAAe,EAAE9C;AAA1C,SADZ;AAEE,QAAA,YAAY,EAAE;AAAEkD,UAAAA,KAAK,EAAE/C;AAAT,SAFhB;AAAA;AAAA;AAAA;AAAA;AAAA,wBAZJ,CADF;AAoBD;;AAED,WACE,oBAAC,gBAAD;AACE,MAAA,KAAK,EAAEgD,MAAM,CAACC,SADhB;AAEE,MAAA,aAAa,EAAE,IAFjB;AAGE,MAAA,cAAc,EAAE,KAAKd,UAHvB;AAIE,MAAA,GAAG,EAAEF,SAAS,IAAI;AAAC,aAAKA,SAAL,GAAiBA,SAAjB;AAA4B,OAJjD;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGb,SAAS,CAACU,GAAV,CAAc,CAACoB,QAAD,EAAWlB,GAAX,KACb,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEgB,MAAM,CAACG,aAApB;AAAmC,MAAA,GAAG,EAAEnB,GAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEgB,MAAM,CAACI,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEJ,MAAM,CAACK,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA,OACGrB,GAAG,GAAG,CADT,SACeZ,SAAS,CAACC,MADzB,CADF,CADF,EAME,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAAC2B,MAAM,CAACI,KAAR,EAAeJ,MAAM,CAACM,iBAAtB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEN,MAAM,CAACO,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA,OACGzC,IAAI,KAAKT,KAAK,CAACC,QAAf,GAA0B,UAA1B,GAAuC,QAD1C,CADF,EAIE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE0C,MAAM,CAACQ,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAER,MAAM,CAACS,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA,OACG3C,IAAI,KAAKT,KAAK,CAACC,QAAf,GACG4C,QAAQ,CAACA,QADZ,GAEGA,QAAQ,CAACzC,MAHf,CADF,CAJF,CANF,EAkBGK,IAAI,KAAKT,KAAK,CAACC,QAAf,GACC,oBAAC,YAAD;AACE,MAAA,QAAQ,EAAE;AAAEyC,QAAAA,KAAK,EAAEhD;AAAT,OADZ;AAEE,MAAA,OAAO,EAAE,MAAM,KAAK6B,QAAL,CAAc;AAAEd,QAAAA,IAAI,EAAET,KAAK,CAACE;AAAd,OAAd,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,qBADD,GAOC,oBAAC,YAAD;AACE,MAAA,QAAQ,EAAE;AAAEwC,QAAAA,KAAK,EAAEhD;AAAT,OADZ;AAEE,MAAA,OAAO,EAAE,MAAM,KAAK6B,QAAL,CAAc;AAAEd,QAAAA,IAAI,EAAET,KAAK,CAACC;AAAd,OAAd,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,uBAzBJ,EAgCE,oBAAC,cAAD;AACI,MAAA,QAAQ,EAAE;AAAEqC,QAAAA,eAAe,EAAE5C,GAAnB;AAAwB2C,QAAAA,WAAW,EAAExC;AAArC,OADd;AAEI,MAAA,OAAO,EAAE,MAAM,KAAKuB,GAAL,CAAShB,MAAM,CAACE,SAAhB,EAA2BqB,GAA3B,CAFnB;AAGI,MAAA,QAAQ,EAAE,KAAKnB,KAAL,CAAWS,QAAX,CAAoBU,GAApB,MAA6B,CAH3C;AAAA;AAAA;AAAA;AAAA;AAAA,mBAhCF,EAsCI,oBAAC,cAAD;AACE,MAAA,QAAQ,EAAE;AAAEW,QAAAA,eAAe,EAAE7C,KAAnB;AAA0B4C,QAAAA,WAAW,EAAExC;AAAvC,OADZ;AAEE,MAAA,OAAO,EAAE,MAAM,KAAKuB,GAAL,CAAShB,MAAM,CAACC,OAAhB,EAAyBsB,GAAzB,CAFjB;AAGE,MAAA,QAAQ,EAAE,KAAKnB,KAAL,CAAWS,QAAX,CAAoBU,GAApB,MAA6B,CAHzC;AAAA;AAAA;AAAA;AAAA;AAAA,iBAtCJ,CADD,CALH,CADF;AAuDD;;AA/IqC;AAA3BpB,Q,CACJ8C,S,GAAY;AACjBvC,EAAAA,IAAI,EAAE1B,SAAS,CAACkE,MAAV,CAAiBC,UADN;AAEjBhB,EAAAA,UAAU,EAAEnD,SAAS,CAACkE,MAAV,CAAiBC;AAFZ,C;AAiJrB,MAAMZ,MAAM,GAAGa,UAAU,CAACC,MAAX,CAAkB;AAC/Bb,EAAAA,SAAS,EAAE;AACTc,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BZ,EAAAA,aAAa,EAAE;AACbY,IAAAA,IAAI,EAAE,CADO;AAEbC,IAAAA,UAAU,EAAE,EAFC;AAGbC,IAAAA,WAAW,EAAE,EAHA;AAIbC,IAAAA,YAAY,EAAE,EAJD;AAKbC,IAAAA,aAAa,EAAE,EALF;AAMbxB,IAAAA,eAAe,EAAE9C,IANJ;AAObuE,IAAAA,cAAc,EAAE;AAPH,GAJgB;AAa/BhB,EAAAA,KAAK,EAAE;AACLiB,IAAAA,YAAY,EAAE;AADT,GAbwB;AAiB/BZ,EAAAA,KAAK,EAAE;AACLa,IAAAA,QAAQ,EAAE,EADL;AAEL/B,IAAAA,SAAS,EAAE;AAFN,GAjBwB;AAqB/Be,EAAAA,iBAAiB,EAAE;AACjBiB,IAAAA,WAAW,EAAE,CADI;AAEjB7B,IAAAA,WAAW,EAAEzC,QAFI;AAGjB0C,IAAAA,eAAe,EAAEzC,KAHA;AAIjBsE,IAAAA,YAAY,EAAE,CAJG;AAKjBR,IAAAA,UAAU,EAAE,EALK;AAMjBG,IAAAA,aAAa,EAAE,EANE;AAOjBF,IAAAA,WAAW,EAAE,EAPI;AAQjBC,IAAAA,YAAY,EAAE,EARG;AASjBO,IAAAA,QAAQ,EAAE;AATO,GArBY;AAgC/BjB,EAAAA,eAAe,EAAE;AACfO,IAAAA,IAAI,EAAE,CADS;AAEfK,IAAAA,cAAc,EAAE;AAFD;AAhCc,CAAlB,CAAf;;AAuCA,MAAMM,eAAe,GAAG,CAAC7D,KAAD,WAAsB;AAAA,MAAd;AAAE4C,IAAAA;AAAF,GAAc;AAC5C,QAAMtC,IAAI,GAAGN,KAAK,CAAC4C,KAAD,CAAlB;AAEA,SAAO;AACLtC,IAAAA;AADK,GAAP;AAGD,CAND;;AAQA,eAAef,cAAc,CAACD,OAAO,CAACuE,eAAD,CAAP,CAAyB9D,QAAzB,CAAD,CAA7B","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, Text, StyleSheet, ViewPagerAndroid } from 'react-native';\r\nimport CustomButton from './CustomButton';\r\nimport TouchingButton from './TouchingButton';\r\nimport { gray, green, red, textGray, darkGray, white } from '../utils/colors';\r\nimport { connect } from 'react-redux';\r\nimport { withNavigation } from 'react-navigation';\r\n\r\nconst views = { QUESTION: 'question', ANSWER: 'answer', RESULT: 'result' };\r\nconst answer = { CORRECT: 'correct', INCORRECT: 'incorrect'};\r\n\r\nexport class TestQuiz extends Component {\r\n  static propTypes = {\r\n    deck: PropTypes.object.isRequired,\r\n    navigation: PropTypes.object.isRequired,\r\n  };\r\n  state = {\r\n    show: views.QUESTION,\r\n    correct: 0,\r\n    incorrect: 0,\r\n    questionCount: this.props.deck.questions.length,\r\n    answered: Array(this.props.deck.questions.length).fill(0)\r\n  };\r\n\r\n  ans = (response, page) => {\r\n    if (response === answer.CORRECT) {\r\n      this.setState(prevState => ({ correct: prevState.correct + 1 }));\r\n    } else {\r\n      this.setState(prevState => ({ incorrect: prevState.incorrect + 1 }));\r\n    }\r\n    this.setState(\r\n      prevState => ({\r\n        answered: prevState.answered.map((val, idx) => (page === idx ? 1 : val))\r\n      }),\r\n      () => {\r\n        // console.log('this.state.answered', this.state.answered);\r\n        const { correct, incorrect, questionCount } = this.state;\r\n\r\n        if (questionCount === correct + incorrect) {\r\n          this.setState({ show: views.RESULT });\r\n        } else {\r\n          this.viewPager.setPage(page + 1);\r\n          this.setState(prevState => ({\r\n            show: views.QUESTION\r\n          }));\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  changePage = evt => { this.setState({ show: views.QUESTION }); };\r\n\r\n  reset = () => {\r\n    this.setState(prevState => ({ show: views.QUESTION, correct: 0, incorrect: 0,\r\n    answered: Array(prevState.questionCount).fill(0)\r\n    }));\r\n  };\r\n  \r\n  render() {\r\n    const { show } = this.state;\r\n    const { questions } = this.props.deck;\r\n\r\n    if (questions.length === 0) {\r\n      return (\r\n        <View  style={{ textAlign: 'center' }}>\r\n            <Text>\r\n              OMG! There is no Cards in this DECK, So you can't take this QUIZ. \r\n              But, You can add some cards and try again later.\r\n            </Text>\r\n        </View>\r\n      );\r\n    }\r\n\r\n    if (this.state.show === views.RESULT) {\r\n      const { correct, questionCount } = this.state;\r\n      const percent = ((correct / questionCount) * 100).toFixed(0);\r\n\r\n      return (\r\n        <View style={ { textAlign: 'center' }}>\r\n            <Text> Congrats! Quiz Completed !!!! </Text>\r\n            <Text>{correct} / {questionCount} correct </Text>\r\n            <Text> Percentage for the correct Answers : {percent}% </Text>\r\n            <TouchingButton  onPress={this.reset}\r\n              btnStyle={{ borderColor: textGray, backgroundColor: gray }}>\r\n              Retake Quiz\r\n            </TouchingButton>\r\n            <TouchingButton onPress={() => { this.reset(); this.props.navigation.goBack(); }}\r\n              btnStyle={{ borderColor: textGray, backgroundColor: gray }}>\r\n              Back To Deck\r\n            </TouchingButton>\r\n            <TouchingButton onPress={() => {this.reset();this.props.navigation.navigate('Home');}}\r\n              btnStyle={{ borderColor: textGray, backgroundColor: gray }}\r\n              styleForText={{ color: textGray }}>\r\n              Back to Home\r\n            </TouchingButton>\r\n        </View>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ViewPagerAndroid\r\n        style={styles.container}\r\n        scrollEnabled={true}\r\n        onPageSelected={this.changePage}\r\n        ref={viewPager => {this.viewPager = viewPager;}}>\r\n        {questions.map((question, idx) => (\r\n          <View style={styles.pageContainer} key={idx}>\r\n            <View style={styles.block}>\r\n              <Text style={styles.count}>\r\n                {idx + 1} / {questions.length}\r\n              </Text>\r\n            </View>\r\n            <View style={[styles.block, styles.questionContainer]}>\r\n              <Text style={styles.questionText}>\r\n                {show === views.QUESTION ? 'Question' : 'Answer'}\r\n              </Text>\r\n              <View style={styles.questionWrapper}>\r\n                <Text style={styles.title}>\r\n                  {show === views.QUESTION\r\n                    ? question.question\r\n                    : question.answer}\r\n                </Text>\r\n              </View>\r\n            </View>\r\n            {show === views.QUESTION ? (\r\n              <CustomButton\r\n                txtStyle={{ color: red }}\r\n                onPress={() => this.setState({ show: views.ANSWER })}>\r\n                Show Answer\r\n              </CustomButton>\r\n            ) : (\r\n              <CustomButton\r\n                txtStyle={{ color: red }}\r\n                onPress={() => this.setState({ show: views.QUESTION })}\r\n              >\r\n                Show Question\r\n              </CustomButton>\r\n            )}\r\n            <TouchingButton\r\n                btnStyle={{ backgroundColor: red, borderColor: white }}\r\n                onPress={() => this.ans(answer.INCORRECT, idx)}\r\n                disabled={this.state.answered[idx] === 1}>\r\n                Incorrect\r\n              </TouchingButton>\r\n              <TouchingButton\r\n                btnStyle={{ backgroundColor: green, borderColor: white }}\r\n                onPress={() => this.ans(answer.CORRECT, idx)}\r\n                disabled={this.state.answered[idx] === 1}>\r\n                Correct\r\n              </TouchingButton>\r\n          </View>\r\n        ))}\r\n      </ViewPagerAndroid>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1\r\n  },\r\n  pageContainer: {\r\n    flex: 1,\r\n    paddingTop: 16,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    paddingBottom: 16,\r\n    backgroundColor: gray,\r\n    justifyContent: 'space-around'\r\n  },\r\n  block: {\r\n    marginBottom: 20\r\n  },\r\n\r\n  title: {\r\n    fontSize: 32,\r\n    textAlign: 'center'\r\n  },\r\n  questionContainer: {\r\n    borderWidth: 1,\r\n    borderColor: darkGray,\r\n    backgroundColor: white,\r\n    borderRadius: 5,\r\n    paddingTop: 20,\r\n    paddingBottom: 20,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    flexGrow: 1\r\n  },\r\n  questionWrapper: {\r\n    flex: 1,\r\n    justifyContent: 'center'\r\n  },\r\n\r\n});\r\n\r\nconst mapStateToProps = (state, { title }) => {\r\n  const deck = state[title];\r\n\r\n  return {\r\n    deck\r\n  };\r\n};\r\n\r\nexport default withNavigation(connect(mapStateToProps)(TestQuiz));\r\n"]},"metadata":{},"sourceType":"module"}