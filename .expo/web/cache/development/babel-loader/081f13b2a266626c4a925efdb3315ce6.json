{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { decks } from \"./_DATA\";\nconst STORAGE_KEY = 'HebaMohammedAli:decks';\nexport function getAllData() {\n  return decks;\n}\nexport function getDecks() {\n  return _getDecks.apply(this, arguments);\n}\n\nfunction _getDecks() {\n  _getDecks = _asyncToGenerator(function* () {\n    const storeResults = yield AsyncStorage.getItem(STORAGE_KEY);\n\n    if (storeResults === null) {\n      AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(decks));\n    }\n\n    return storeResults === null ? decks : JSON.parse(storeResults);\n  });\n  return _getDecks.apply(this, arguments);\n}\n\nfunction resetResults(results) {\n  return results === null ? decks : JSON.parse(results);\n}\n\nexport function getOldDecks() {\n  return AsyncStorage.getItem(STORAGE_KEY).then(resetResults);\n}\nexport function getOneDeck(_x) {\n  return _getOneDeck.apply(this, arguments);\n}\n\nfunction _getOneDeck() {\n  _getOneDeck = _asyncToGenerator(function* (id) {\n    const storeResults = yield AsyncStorage.getItem(STORAGE_KEY);\n    return JSON.parse(storeResults)[id];\n  });\n  return _getOneDeck.apply(this, arguments);\n}\n\nexport function removeDeckAS(_x2) {\n  return _removeDeckAS.apply(this, arguments);\n}\n\nfunction _removeDeckAS() {\n  _removeDeckAS = _asyncToGenerator(function* (key) {\n    const results = yield AsyncStorage.getItem(STORAGE_KEY);\n    const data = JSON.parse(results);\n    data[key] = undefined;\n    delete data[key];\n    AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  });\n  return _removeDeckAS.apply(this, arguments);\n}\n\nexport function backToFactoryMood() {\n  return _backToFactoryMood.apply(this, arguments);\n}\n\nfunction _backToFactoryMood() {\n  _backToFactoryMood = _asyncToGenerator(function* () {\n    yield AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(decks));\n  });\n  return _backToFactoryMood.apply(this, arguments);\n}\n\nexport function saveDeckTitleAS(_x3) {\n  return _saveDeckTitleAS.apply(this, arguments);\n}\n\nfunction _saveDeckTitleAS() {\n  _saveDeckTitleAS = _asyncToGenerator(function* (title) {\n    yield AsyncStorage.mergeItem(STORAGE_KEY, JSON.stringify({\n      [title]: {\n        title,\n        questions: []\n      }\n    }));\n  });\n  return _saveDeckTitleAS.apply(this, arguments);\n}\n\nexport function addCardToDeckAS(_x4, _x5) {\n  return _addCardToDeckAS.apply(this, arguments);\n}\n\nfunction _addCardToDeckAS() {\n  _addCardToDeckAS = _asyncToGenerator(function* (title, card) {\n    const deck = yield getOneDeck(title);\n    yield AsyncStorage.mergeItem(STORAGE_KEY, JSON.stringify({\n      [title]: {\n        questions: [...deck.questions].concat(card)\n      }\n    }));\n  });\n  return _addCardToDeckAS.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/ahmedelsayed/work/learn/nanoDegree/flash cards/untitled folder/Mobile-flash-card-master/utils/api.js"],"names":["decks","STORAGE_KEY","getAllData","getDecks","storeResults","AsyncStorage","getItem","setItem","JSON","stringify","parse","resetResults","results","getOldDecks","then","getOneDeck","id","removeDeckAS","key","data","undefined","backToFactoryMood","saveDeckTitleAS","title","mergeItem","questions","addCardToDeckAS","card","deck","concat"],"mappings":";;;;;AACA,SAASA,KAAT;AAEA,MAAMC,WAAW,GAAG,uBAApB;AAEA,OAAO,SAASC,UAAT,GAAsB;AAC3B,SAAOF,KAAP;AACD;AAED,gBAAsBG,QAAtB;AAAA;AAAA;;;gCAAO,aAA0B;AAC7B,UAAMC,YAAY,SAASC,YAAY,CAACC,OAAb,CAAqBL,WAArB,CAA3B;;AAEA,QAAIG,YAAY,KAAK,IAArB,EAA2B;AACzBC,MAAAA,YAAY,CAACE,OAAb,CAAqBN,WAArB,EAAkCO,IAAI,CAACC,SAAL,CAAeT,KAAf,CAAlC;AACD;;AAED,WAAOI,YAAY,KAAK,IAAjB,GAAwBJ,KAAxB,GAAgCQ,IAAI,CAACE,KAAL,CAAWN,YAAX,CAAvC;AACH,G;;;;AAED,SAASO,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,SAAOA,OAAO,KAAK,IAAZ,GAAmBZ,KAAnB,GAA2BQ,IAAI,CAACE,KAAL,CAAWE,OAAX,CAAlC;AACD;;AAED,OAAO,SAASC,WAAT,GAAuB;AAC5B,SAAOR,YAAY,CAACC,OAAb,CAAqBL,WAArB,EAAkCa,IAAlC,CAAuCH,YAAvC,CAAP;AACD;AAED,gBAAsBI,UAAtB;AAAA;AAAA;;;kCAAO,WAA0BC,EAA1B,EAA8B;AACjC,UAAMZ,YAAY,SAASC,YAAY,CAACC,OAAb,CAAqBL,WAArB,CAA3B;AAEA,WAAOO,IAAI,CAACE,KAAL,CAAWN,YAAX,EAAyBY,EAAzB,CAAP;AACH,G;;;;AAED,gBAAsBC,YAAtB;AAAA;AAAA;;;oCAAO,WAA4BC,GAA5B,EAAiC;AACpC,UAAMN,OAAO,SAASP,YAAY,CAACC,OAAb,CAAqBL,WAArB,CAAtB;AACA,UAAMkB,IAAI,GAAGX,IAAI,CAACE,KAAL,CAAWE,OAAX,CAAb;AACAO,IAAAA,IAAI,CAACD,GAAD,CAAJ,GAAYE,SAAZ;AACA,WAAOD,IAAI,CAACD,GAAD,CAAX;AACAb,IAAAA,YAAY,CAACE,OAAb,CAAqBN,WAArB,EAAkCO,IAAI,CAACC,SAAL,CAAeU,IAAf,CAAlC;AACH,G;;;;AAED,gBAAsBE,iBAAtB;AAAA;AAAA;;;yCAAO,aAAmC;AACxC,UAAMhB,YAAY,CAACE,OAAb,CAAqBN,WAArB,EAAkCO,IAAI,CAACC,SAAL,CAAeT,KAAf,CAAlC,CAAN;AACD,G;;;;AAED,gBAAsBsB,eAAtB;AAAA;AAAA;;;uCAAO,WAA+BC,KAA/B,EAAsC;AAC3C,UAAMlB,YAAY,CAACmB,SAAb,CAAuBvB,WAAvB,EAAoCO,IAAI,CAACC,SAAL,CAAe;AAAC,OAACc,KAAD,GAAS;AAC7DA,QAAAA,KAD6D;AAE7DE,QAAAA,SAAS,EAAE;AAFkD;AAAV,KAAf,CAApC,CAAN;AAMD,G;;;;AAED,gBAAsBC,eAAtB;AAAA;AAAA;;;uCAAO,WAA+BH,KAA/B,EAAsCI,IAAtC,EAA4C;AAC/C,UAAMC,IAAI,SAASb,UAAU,CAACQ,KAAD,CAA7B;AAEA,UAAMlB,YAAY,CAACmB,SAAb,CAAuBvB,WAAvB,EAAoCO,IAAI,CAACC,SAAL,CAAe;AAAC,OAACc,KAAD,GAAS;AAC7DE,QAAAA,SAAS,EAAE,CAAC,GAAGG,IAAI,CAACH,SAAT,EAAoBI,MAApB,CAA2BF,IAA3B;AADkD;AAAV,KAAf,CAApC,CAAN;AAKH,G","sourcesContent":["import { AsyncStorage } from 'react-native';\r\nimport { decks } from './_DATA';\r\n\r\nconst STORAGE_KEY = 'HebaMohammedAli:decks';\r\n\r\nexport function getAllData() {\r\n  return decks;\r\n}\r\n\r\nexport async function getDecks() {\r\n    const storeResults = await AsyncStorage.getItem(STORAGE_KEY);\r\n\r\n    if (storeResults === null) {\r\n      AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(decks));\r\n    }\r\n\r\n    return storeResults === null ? decks : JSON.parse(storeResults);\r\n}\r\n\r\nfunction resetResults(results) {\r\n  return results === null ? decks : JSON.parse(results);\r\n}\r\n\r\nexport function getOldDecks() {\r\n  return AsyncStorage.getItem(STORAGE_KEY).then(resetResults);\r\n}\r\n\r\nexport async function getOneDeck(id) {\r\n    const storeResults = await AsyncStorage.getItem(STORAGE_KEY);\r\n\r\n    return JSON.parse(storeResults)[id];\r\n}\r\n\r\nexport async function removeDeckAS(key) {\r\n    const results = await AsyncStorage.getItem(STORAGE_KEY);\r\n    const data = JSON.parse(results);\r\n    data[key] = undefined;\r\n    delete data[key];\r\n    AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(data));\r\n}\r\n\r\nexport async function backToFactoryMood() {\r\n  await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(decks));\r\n}\r\n\r\nexport async function saveDeckTitleAS(title) {\r\n  await AsyncStorage.mergeItem(STORAGE_KEY, JSON.stringify({[title]: {\r\n        title,\r\n        questions: []\r\n      }\r\n    })\r\n  );\r\n}\r\n\r\nexport async function addCardToDeckAS(title, card) {\r\n    const deck = await getOneDeck(title);\r\n\r\n    await AsyncStorage.mergeItem(STORAGE_KEY, JSON.stringify({[title]: {\r\n          questions: [...deck.questions].concat(card)\r\n        }\r\n      })\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}