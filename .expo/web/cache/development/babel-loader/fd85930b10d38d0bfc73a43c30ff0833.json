{"ast":null,"code":"import { getDecks } from \"../utils/api\";\nexport const ADD_NEW_CARD = 'ADD_NEW_CARD';\nexport const GET_ALL_DECKS = 'GET_ALL_DECKS';\nexport const ADD_NEW_DECK = 'ADD_NEW_DECK';\nexport const REMOVE_CERTAIN_DECK = 'REMOVE_CERTAIN_DECK';\nexport const RESET_DATA = 'RESET_DATA';\nexport function initDataHandling() {\n  return dispatch => {\n    return getDecks().then(decks => {\n      dispatch(getAllDecks(decks));\n    });\n  };\n}\nexport function getAllDecks(decks) {\n  return {\n    type: GET_ALL_DECKS,\n    decks\n  };\n}\nexport function addDeck(title) {\n  return {\n    type: ADD_NEW_DECK,\n    title\n  };\n}\nexport function addCardToDeck(deckId, card) {\n  return {\n    type: ADD_NEW_CARD,\n    deckId,\n    card\n  };\n}\nexport function removeCertainDeck(id) {\n  return {\n    type: REMOVE_CERTAIN_DECK,\n    id\n  };\n}\nexport function resetData() {\n  return {\n    type: RESET_DATA\n  };\n}","map":{"version":3,"sources":["/Users/ahmedelsayed/work/learn/nanoDegree/flash cards/untitled folder/Mobile-flash-card-master/actions/index.js"],"names":["getDecks","ADD_NEW_CARD","GET_ALL_DECKS","ADD_NEW_DECK","REMOVE_CERTAIN_DECK","RESET_DATA","initDataHandling","dispatch","then","decks","getAllDecks","type","addDeck","title","addCardToDeck","deckId","card","removeCertainDeck","id","resetData"],"mappings":"AAAA,SAASA,QAAT;AAGA,OAAO,MAAMC,YAAY,GAAG,cAArB;AAGP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAGP,OAAO,MAAMC,UAAU,GAAG,YAAnB;AAEP,OAAO,SAASC,gBAAT,GAA4B;AACjC,SAAOC,QAAQ,IAAI;AACjB,WAAOP,QAAQ,GAAGQ,IAAX,CAAgBC,KAAK,IAAI;AAC9BF,MAAAA,QAAQ,CAACG,WAAW,CAACD,KAAD,CAAZ,CAAR;AACD,KAFM,CAAP;AAGD,GAJD;AAKD;AAED,OAAO,SAASC,WAAT,CAAqBD,KAArB,EAA4B;AACjC,SAAO;AACLE,IAAAA,IAAI,EAAET,aADD;AAELO,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASG,OAAT,CAAiBC,KAAjB,EAAwB;AAC7B,SAAO;AACLF,IAAAA,IAAI,EAAER,YADD;AAELU,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,IAA/B,EAAqC;AAC1C,SAAO;AACLL,IAAAA,IAAI,EAAEV,YADD;AAELc,IAAAA,MAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD;AAED,OAAO,SAASC,iBAAT,CAA2BC,EAA3B,EAA+B;AACpC,SAAO;AACLP,IAAAA,IAAI,EAAEP,mBADD;AAELc,IAAAA;AAFK,GAAP;AAID;AAGD,OAAO,SAASC,SAAT,GAAqB;AAC1B,SAAO;AACLR,IAAAA,IAAI,EAAEN;AADD,GAAP;AAGD","sourcesContent":["import { getDecks } from '../utils/api';\r\n\r\n// Card\r\nexport const ADD_NEW_CARD = 'ADD_NEW_CARD';\r\n\r\n// Decks\r\nexport const GET_ALL_DECKS = 'GET_ALL_DECKS';\r\nexport const ADD_NEW_DECK = 'ADD_NEW_DECK';\r\nexport const REMOVE_CERTAIN_DECK = 'REMOVE_CERTAIN_DECK';\r\n\r\n// Reset all Decks\r\nexport const RESET_DATA = 'RESET_DATA';\r\n\r\nexport function initDataHandling() {\r\n  return dispatch => {\r\n    return getDecks().then(decks => {\r\n      dispatch(getAllDecks(decks));\r\n    });\r\n  };\r\n}\r\n\r\nexport function getAllDecks(decks) {\r\n  return {\r\n    type: GET_ALL_DECKS,\r\n    decks\r\n  };\r\n}\r\n\r\nexport function addDeck(title) {\r\n  return {\r\n    type: ADD_NEW_DECK,\r\n    title\r\n  };\r\n}\r\n\r\nexport function addCardToDeck(deckId, card) {\r\n  return {\r\n    type: ADD_NEW_CARD,\r\n    deckId,\r\n    card\r\n  };\r\n}\r\n\r\nexport function removeCertainDeck(id) {\r\n  return {\r\n    type: REMOVE_CERTAIN_DECK,\r\n    id\r\n  };\r\n}\r\n\r\n\r\nexport function resetData() {\r\n  return {\r\n    type: RESET_DATA\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}